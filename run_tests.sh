#!/bin/bash

# Script d'ex√©cution des tests pour MonCoin
# Usage: ./run_tests.sh [option]
# Options:
#   unit       - Ex√©cuter uniquement les tests unitaires
#   integration - Ex√©cuter uniquement les tests d'int√©gration
#   all        - Ex√©cuter tous les tests (d√©faut)
#   coverage   - G√©n√©rer le rapport de couverture
#   critical   - Ex√©cuter uniquement les tests critiques

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher un message color√©
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fonction pour afficher un titre
print_title() {
    echo ""
    print_message "$BLUE" "=========================================="
    print_message "$BLUE" "$1"
    print_message "$BLUE" "=========================================="
    echo ""
}

# Fonction pour ex√©cuter les tests unitaires
run_unit_tests() {
    print_title "üß™ Ex√©cution des Tests Unitaires"
    ./gradlew test
    
    if [ $? -eq 0 ]; then
        print_message "$GREEN" "‚úÖ Tests unitaires r√©ussis !"
        echo "üìä Rapport disponible : app/build/reports/tests/testDebugUnitTest/index.html"
    else
        print_message "$RED" "‚ùå Tests unitaires √©chou√©s !"
        exit 1
    fi
}

# # Fonction pour ex√©cuter les tests d'int√©gration
# run_integration_tests() {
#     print_title "üîß Ex√©cution des Tests d'Int√©gration"
    
#     # Trouver adb dans le SDK Android
#     ADB_PATH=""
#     if [ -n "$ANDROID_HOME" ]; then
#         ADB_PATH="$ANDROID_HOME/platform-tools/adb"
#     elif [ -n "$ANDROID_SDK_ROOT" ]; then
#         ADB_PATH="$ANDROID_SDK_ROOT/platform-tools/adb"
#     elif [ -f "$HOME/Android/Sdk/platform-tools/adb" ]; then
#         ADB_PATH="$HOME/Android/Sdk/platform-tools/adb"
#     fi
    
#     # V√©rifier qu'un appareil est connect√© (si adb est disponible)
#     if [ -n "$ADB_PATH" ] && [ -f "$ADB_PATH" ]; then
#         if ! $ADB_PATH devices | grep -q "device$"; then
#             print_message "$YELLOW" "‚ö†Ô∏è  Aucun appareil d√©tect√© via adb"
#             print_message "$YELLOW" "Les tests vont quand m√™me s'ex√©cuter (Gradle d√©tectera l'√©mulateur)"
#         else
#             print_message "$GREEN" "üì± Appareil d√©tect√©"
#         fi
#     else
#         print_message "$YELLOW" "‚ö†Ô∏è  adb non trouv√© dans le PATH"
#         print_message "$YELLOW" "Les tests vont quand m√™me s'ex√©cuter (Gradle d√©tectera l'√©mulateur)"
#     fi
    
#     ./gradlew connectedAndroidTest
    
#     if [ $? -eq 0 ]; then
#         print_message "$GREEN" "‚úÖ Tests d'int√©gration r√©ussis !"
#         echo "üìä Rapport disponible : app/build/reports/androidTests/connected/index.html"
#     else
#         print_message "$RED" "‚ùå Tests d'int√©gration √©chou√©s !"
#         exit 1
#     fi
# }

# Fonction pour ex√©cuter les tests critiques
run_critical_tests() {
    print_title "‚ö° Ex√©cution des Tests Critiques"
    
    print_message "$YELLOW" "Tests du syst√®me d'alarmes..."
    ./gradlew test --tests AlarmSchedulerTest
    ./gradlew test --tests TaskStateCheckerTest
    
    print_message "$YELLOW" "Tests du repository..."
    ./gradlew test --tests TaskRepositoryTest
    
    print_message "$YELLOW" "Tests du ViewModel..."
    ./gradlew test --tests HomeViewModelTest
    
    if [ $? -eq 0 ]; then
        print_message "$GREEN" "‚úÖ Tests critiques r√©ussis !"
    else
        print_message "$RED" "‚ùå Tests critiques √©chou√©s !"
        exit 1
    fi
}

# Fonction pour g√©n√©rer le rapport de couverture
generate_coverage() {
    print_title "üìä G√©n√©ration du Rapport de Couverture"
    
    ./gradlew test jacocoTestReport
    
    if [ $? -eq 0 ]; then
        print_message "$GREEN" "‚úÖ Rapport de couverture g√©n√©r√© !"
        echo "üìä Rapport disponible : app/build/reports/jacoco/jacocoTestReport/html/index.html"
        
        # Ouvrir le rapport dans le navigateur (Linux)
        if command -v xdg-open &> /dev/null; then
            xdg-open app/build/reports/jacoco/jacocoTestReport/html/index.html
        fi
    else
        print_message "$RED" "‚ùå G√©n√©ration du rapport √©chou√©e !"
        exit 1
    fi
}

# Fonction pour nettoyer avant les tests
clean_build() {
    print_title "üßπ Nettoyage du Projet"
    ./gradlew clean
    print_message "$GREEN" "‚úÖ Nettoyage termin√©"
}

# Fonction pour afficher l'aide
show_help() {
    echo "Usage: ./run_tests.sh [option]"
    echo ""
    echo "Options:"
    echo "  unit        - Ex√©cuter uniquement les tests unitaires"
    echo "  integration - Ex√©cuter uniquement les tests d'int√©gration"
    echo "  all         - Ex√©cuter tous les tests (d√©faut)"
    echo "  critical    - Ex√©cuter uniquement les tests critiques"
    echo "  coverage    - G√©n√©rer le rapport de couverture"
    echo "  clean       - Nettoyer le projet avant les tests"
    echo "  help        - Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  ./run_tests.sh unit"
    echo "  ./run_tests.sh integration"
    echo "  ./run_tests.sh coverage"
}

# Fonction principale
main() {
    local option=${1:-all}
    
    print_title "üöÄ MonCoin - Ex√©cution des Tests"
    print_message "$YELLOW" "Option s√©lectionn√©e : $option"
    
    case $option in
        unit)
            run_unit_tests
            ;;
        all)
            run_unit_tests
            ;;
        critical)
            run_critical_tests
            ;;
        coverage)
            generate_coverage
            ;;
        clean)
            clean_build
            ;;
        help)
            show_help
            ;;
        *)
            print_message "$RED" "‚ùå Option invalide : $option"
            show_help
            exit 1
            ;;
    esac
    
    print_title "‚ú® Tests Termin√©s avec Succ√®s !"
}

# Ex√©cuter le script
main "$@"
